{
    "version": "https://jsonfeed.org/version/1",
    "user_comment": "This feed allows you to read the posts from this site in any feed reader that supports the JSON Feed format. To add this feed to your reader, copy the following URL -- http://bitsplitting.org/feed/json/ -- and add it your reader.",
    "home_page_url": "http://bitsplitting.org",
    "feed_url": "http://bitsplitting.org/feed/json/",
    "title": "Bitsplitting.org",
    "description": "Chasing the impossible with Daniel Jalkut",
    "items": [
        {
            "id": "http://bitsplitting.org/2017/05/25/multilingual-completion/",
            "url": "http://bitsplitting.org/2017/05/25/multilingual-completion/",
            "title": "Multilingual Completion",
            "content_html": "<p>At times I&#8217;ve been frustrated that when I&#8217;m trying to type a Spanish word on my iPhone, I&#8217;m only offered completions in English. For example, if I wanted to type the Spanish word for ostrich, <em>avestruz</em>:</p>\n<p><img src=\"http://bitsplitting.org/wp-content/uploads/2017/05/IMG_2568.png\" alt=\"IMG 2568\" title=\"IMG_2568.PNG\" border=\"0\" width=\"174\" height=\"311\" /></p>\n<p>It finally occurred to me that I could add a Spanish keyboard to my Keyboard settings:</p>\n<p><img src=\"http://bitsplitting.org/wp-content/uploads/2017/05/IMG_2574.png\" alt=\"IMG 2574\" title=\"IMG_2574.PNG\" border=\"0\" width=\"174\" height=\"311\" /></p>\n<p>Now, when I&#8217;m in an app or on a web site where I&#8217;m likely to type in Spanish, I can easily change the keyboard and get Spanish-language completions.</p>\n<p>It gets better: if a second-language keyboard such as Spanish is <em>merely enabled</em>, it affects the keyboard completion behavior such that completions from either your first or second language is included. Here I am typing &#8220;aves&#8221; <em>in the English keyboard</em>, but completion is smart enough to infer that I&#8217;m looking for &#8220;avestruz&#8221;:</p>\n<p><img src=\"http://bitsplitting.org/wp-content/uploads/2017/05/IMG_2575.png\" alt=\"IMG 2575\" title=\"IMG_2575.PNG\" border=\"0\" width=\"174\" height=\"311\" /></p>\n<p>I had hoped that iOS&#8217;s willingness to cross language barriers might also apply to Siri dictation, but alas no. &#8220;All these truths&#8221; is the closest it can muster when I speak &#8220;avestruz&#8221;: </p>\n<p><img src=\"http://bitsplitting.org/wp-content/uploads/2017/05/IMG_2570.png\" alt=\"IMG 2570\" title=\"IMG_2570.PNG\" border=\"0\" width=\"174\" height=\"311\" /></p>\n<p>However, having the Spanish keyboard at hand means I can quickly switch keyboards and dictate as expected:</p>\n<p><img src=\"http://bitsplitting.org/wp-content/uploads/2017/05/IMG_2572.png\" alt=\"IMG 2572\" title=\"IMG_2572.PNG\" border=\"0\" width=\"174\" height=\"311\" /></p>\n<p>If you find yourself frequently typing a foreign-language word and hoping for some help from your phone, be sure to install a keyboard for the language so that iOS knows you&#8217;re interested in its suggestions!</p>\n",
            "date_published": "2017-05-25T17:14:26+00:00",
            "date_modified": "2017-05-25T17:14:26+00:00",
            "author": {
                "name": "Daniel Jalkut"
            }
        },
        {
            "id": "http://bitsplitting.org/2017/05/03/40-box-lunch/",
            "url": "http://bitsplitting.org/2017/05/03/40-box-lunch/",
            "title": "$40 Box Lunch",
            "content_html": "<p>I&#8217;ve been <a href=\"http://atp.fm/episodes/219\">hearing all about</a> how the famously atrocious (though some beg to differ) box lunches served at WWDC for the past several years probably cost about $40 each. The discussion on the Accidental Tech Podcast is based on a <a href=\"http://www.gamasutra.com/view/news/117681/GDC_Bosslady_Blog_The_Countdown_Begins.php\">2010 article</a>, cited by <a href=\"https://twitter.com/davidcarlton/status/855273183489826816\">David Carlton on Twitter</a>, in which the Game Developer Conference organizer Meggan Scavio explains that she would offer a $200 cheaper ticket for folks who wanted to opt out of lunch.</p>\n<p>Conventional wisdom suggests that in venues like Moscone West, companies like Apple are forced to use the in-house caterers, and thus required to put up not only with the quality of the food that is offered, but with the price as well. I decided to do some shallow digging, and confirmed that Moscone West does in fact forbid exhibitors from bringing in their own food and drink. In fact the <a href=\"https://www.moscone.com/mtgplanners/faq/catering.html#exclusivity\">Catering FAQ</a> for the exclusive caterer, Savor SMG, consists of just one question:</p>\n<blockquote>\n<p><strong>May we bring in our own food and beverage booth give-aways? i.e., espresso, candy bars, bottled water?</strong></p>\n<p>Savor SMG is the exclusive provider of all food and beverage for the Moscone Center and is pleased to be able to work with all requests. Please contact your Catering Exhibitor Sales Manager for all requests.</p>\n</blockquote>\n<p>As for the price, is it really $40? Savor SMG&#8217;s <a href=\"http://savorsmgsf.com/PDF_Uploads/2017CateringMenuv2_02-01-2017_dcl208.pdf\">2017 menu</a> confirms that the price is in the right ballpark. The &#8220;Executive Box Lunch&#8221; is $39.25 and sounds about like what I remember from WWDC: </p>\n<blockquote><p>Four compartment. Includes compostable service. 25 guest minimum.<br />\nSandwich, wrap or entre\u0301e salad includes a choice of side salad, dessert and fruit.<br />\nTo accompany your box lunches, we suggest adding assorted soft drinks and bottled water.\n</p></blockquote>\n<p>Soft drinks and water are not included. A 22% service fee, as well as sales tax (almost 10%), are also added to the price. So that $39.25 box lunch comes to around $52 before beverages. On Accidental Tech Podcast they suggested it was probably more than $40 by now, and it sounds like they are right.</p>\n<p>Want to really lose your lunch? Each bottled water is $5.25, coming to $7.00 after service and taxes. And Marco&#8217;s long lost Strawberry C Monster Odwalla (&#8220;Assorted Juices&#8221;) would set Apple back around $8 a bottle. Add it all up and it&#8217;s not hard to imagine meals and snacks coming to $100 a day, or $500 for the week, per person. Nearly a third of the $1600 WWDC admission fee likely pays for food.</p>\n<p>In San Jose, Apple will be free from the rigorous Moscone West catering restrictions, but will have to contend with another exclusive caterer in <a href=\"http://www.sanjose.org/meetings/meeting-toolkit/catering-menus/\">TeamSanJose</a>. They also add a flat 22% service fee, as well as sales tax (8.75%). I don&#8217;t know how their box lunches compare, but the good news is the &#8220;<a href=\"http://www.sanjose.org/media/1397/deli-creationsv7f.pdf\">Gourmet Box Lunch</a>&#8221; comes in at only $22.00. &#8220;Mineral Waters, Soft Drinks, Juices and Bottled Water&#8221; are all a mere $4.50 each. These savings multiplied over 5000 or more staff and attendees should work out to a substantial savings for Apple.</p>\n",
            "date_published": "2017-05-03T15:47:16+00:00",
            "date_modified": "2017-05-03T15:58:54+00:00",
            "author": {
                "name": "Daniel Jalkut"
            }
        },
        {
            "id": "http://bitsplitting.org/2017/05/02/s-is-for-sandboxed/",
            "url": "http://bitsplitting.org/2017/05/02/s-is-for-sandboxed/",
            "title": "S is for Sandboxed",
            "content_html": "<p>Today Microsoft announced their forthcoming Windows 10 S operating system which is being framed, by the press at least, as a <a href=\"https://techcrunch.com/2017/05/02/windows-10-s-will-fuel-microsofts-chromebook-competitors/\">competitor to Google&#8217;s Chrome OS</a>.</p>\n<p>Notably, Windows 10 S will only allow users to install applications from the Windows Store. As with Apple&#8217;s app stores, Windows Store applications are &#8220;sandboxed&#8221; to prevent them from accessing data from other applications on a device. While sandboxing is seen by many as a welcome security protection, it also rules out many types applications that require more sophisticated interaction with user data across multiple applications.</p>\n<p>Users who want or need to install applications from outside the Windows Store will be able to pay $50 to <em>sidegrade</em> to Windows 10 Pro. I use the word <em>sidegrade</em> specifically because, as <a href=\"http://www.businessinsider.com/microsoft-surface-laptop-2017-4\">Business Insider quotes</a>, Microsoft &#8220;can&#8217;t guarantee you&#8217;ll get the improved battery life and performance&#8221; that they promise with Windows 10 S.</p>\n<p>The $50 charge to escape the Windows Store <a href=\"https://daringfireball.net/linked/2017/05/02/windows-10-s\">doesn&#8217;t sit right with John Gruber</a>:</p>\n<blockquote><p>\nBut charging $50 for this feels like a shakedown. Imagine if Apple charged $50 to toggle the setting in the Security pane of System Prefs to allow the use of apps from outside the App Store.</p></blockquote>\n<p>On the face of it, I agree with this reaction. If you look at the $50 strictly as a fee to &#8220;unlock&#8221; an otherwise more powerful Windows 10 S machine, it <em>does feel like a shakedown</em>. But my reading of the $50 offer is much more dramatic than a simple &#8220;unlocking.&#8221; Users who choose to pay the $50 will also be opting in to a substantially different operating system. One with different battery usage, performance metrics, and perhaps other feature deviations from the default Windows 10 S software that Microsoft recommends for these devices. You get, and lose, what you pay for.</p>\n<p>Another alluring aspect to the Windows 10 S lineup is that the most affordable computers will sell for <a href=\"https://techcrunch.com/2017/05/02/windows-10-s-laptops-will-start-at-189-and-ship-this-summer/\">as little as $189</a>. While my understanding is that these computers are licensed, and not manufactured by Microsoft, I wonder if the cutthroat pricing represents a compromise on Microsoft&#8217;s part. To allow for computers this cheap, the OEM price for Windows 10 S must be effectively $0. Separately, Microsoft is offering the operating system as a free update to schools that want to update older Windows computers.</p>\n<p>A $0 operating system that <em>stands to earn ongoing Windows Store sales commissions</em> is a slightly different proposition than one that enables users to install software from third party sources. With no other option, most users are bound to purchase <em>something</em> from the Windows Store, generating a modest profit for Microsoft. The $50 price for upgrading to Windows 10 Pro could be the amount of money that Microsoft deems necessary to cover its losses, on average, for effectively licensing its software for free to owners of millions of computers on which it will otherwise make no profit.</p>\n",
            "date_published": "2017-05-02T21:15:53+00:00",
            "date_modified": "2017-05-02T23:31:00+00:00",
            "author": {
                "name": "Daniel Jalkut"
            }
        },
        {
            "id": "http://bitsplitting.org/2017/03/22/social-networks-are-a-feature/",
            "url": "http://bitsplitting.org/2017/03/22/social-networks-are-a-feature/",
            "title": "Social Networks are a Feature",
            "content_html": "<p>Apple&#8217;s pre-announcement of <a href=\"http://apple.com/clips/\">Clips</a> reminds me of Steve Jobs&#8217;s infamous quip to Dropbox CEO Drew Houston. From a 2011 Forbes feature:</p>\n<blockquote><p>Jobs smiled warmly as he told them he was going after their market. \u201cHe said we were a feature, not a product,\u201d says Houston.</p></blockquote>\n<p>I&#8217;ve heard many dismiss Clips as too little, too late. A blatant attempt by Apple to weasel into the crowded market for quirky photo and video sharing apps. As a 41-year-old, I&#8217;m not sure I completely understand this field, but it appears to be dominated by Snapchat, while Facebook seems desperate to catch up and surpass them.</p>\n<p>Where does that leave Apple? In punditry circles, the company is almost as well-known for their repeated failure to spark a fire in social networking as they are known for their successes in building highly desirable hardware and software products. Yes, products. Apple loves products, and is good at building them.</p>\n<p>Despite constant criticism, Apple controls a pretty huge, relatively smooth-operating social network. The Apple ID single-sign-on infrastructure powers a host of social services including photo sharing, friend finding, document collaboration, shared calendars and reminders, and peripheral services such as Apple Pay that seem poised to make the leap to social when the company sees fit.</p>\n<p>But &#8220;Apple ID&#8221; is not a catchy name for a social network, and despite its popularity among the Mac and iOS faithful, Apple makes little attempt to meaningfully bridge the gap with people who are tied into Facebook, Twitter, Snapchat, Weibo, whatever. These networks are enormously popular not only because users enjoy their features but because they are accessible from all popular hardware platforms. They facilitate interplatform friendship.</p>\n<p>For a variety of reasons, the features afforded to Apple ID account-holders do not seem likely to attract non-Apple customers away from other social networks. So if Apple can&#8217;t beat &#8217;em? Join &#8217;em. Or rather, make it easy for Apple&#8217;s customers to participate at once in Apple-ID-powered services, and with outside social networks.</p>\n<p>It started to appear that Apple had ceded &#8220;the social network&#8221; to other companies when they added standard share functionality to iOS and Mac. Virtually any text, image, or video on these platforms can be efficiently shared to Twitter, Facebook, Flickr, Tumblr, or any of an unlimited number of apps installed on the device that implement support for working with the media in question. If Apple had ambitions of becoming the dominant social network for sharing any of these types of content, they would probably not be so generous in facilitating this integration with their competitors.</p>\n<p>I think Apple wisely considers their role, as the maker of personal computers and mobile devices, as empowering users to achieve specific goals in life. Apple empowers its users to write school papers, organize photos, record a jam session, check email, surf the web, work with a spreadsheet, play games, and yes, to connect with friends and family through a variety of social networks.</p>\n<p>To this end, any time Apple might have spent building out their own social network is better spent investing in tools that maximize users&#8217; enjoyment of the social networks they already belong to. Rather than <em>obsessing over the venue</em> in which social interactions occur, Apple can profit by equipping its users to be more expressive, wherever they may roam.</p>\n<p>If I may stretch the venue metaphor for social networks, imagine you are invited to a huge gala event. Thousands of attendees are anticipated to meet up for an epic night of dining, drinking, and social revelry. Facebook, Snapchat, and Twitter are dying to rent the venue, cater the snacks, and serve the drinks. All things that set the tone for where, and how, people will interact. Apple is content to sell the suit, dress, or whatever, that empowers 30% of attendees to look and feel their best.</p>\n<p>Clips falls naturally into Apple&#8217;s long history of software that is designed to enhance the creative productivity of its customers. GarageBand empowers users to share their musicality with anybody, on any platform, who can play an audio file. Photos and iMovie do the same for visual creative works. And now Clips, recognizing the unique appeal of combining film, photography, visual effects, text, and emoji overlays, seeks to do the very same thing with a twist on the format.</p>\n<p>Few of us wake up every morning &#8220;excited to social network.&#8221; Yet we turn to services like Twitter, Facebook, and Snapchat to connect with friends and strangers. We&#8217;re excited to use the chat, image sharing, file transfer, and collaboration tools that add value to the stark, cold network. Many of these tools are built and shipped by the makers of the network, while others are supplied by third parties.</p>\n<p>Apple&#8217;s Clips appears to be a canonical example of adding value to social networks from the outside. Regardless of whether you meet your friends on Facebook, Twitter, or a network that I have never heard of, Apple is glad to have you use and app like Clips to make your experience more fulfilling and fun. Clips is the latest of many products, from Apple and from others, that empowers you to express yourself uniquely. The social network you choose to do that on is merely a feature that connects you with friends and family.</p>\n",
            "date_published": "2017-03-22T14:20:43+00:00",
            "date_modified": "2017-03-22T14:48:40+00:00",
            "author": {
                "name": "Daniel Jalkut"
            }
        },
        {
            "id": "http://bitsplitting.org/2017/03/16/paper-airplane-icons/",
            "url": "http://bitsplitting.org/2017/03/16/paper-airplane-icons/",
            "title": "Paper Airplane Icons",
            "content_html": "<p>A friend who is running the latest beta of Microsoft&#8217;s Outlook 2016 for Mac shared a screenshot of the app&#8217;s sidebar icons:</p>\n<p><img title=\"Airplane.png\" src=\"http://bitsplitting.org/wp-content/uploads/2017/03/Airplane.png\" alt=\"PaperAirplane\" width=\"164\" height=\"193\" border=\"0\" /></p>\n<p>The paper airplane used for &#8220;Sent&#8221; really jumped out at me, and I felt compelled to re-evaluate how common, and for how long, the metaphor has been used to represent a &#8220;sent email&#8221; in apps.</p>\n<p>It seems obvious the metaphor is supposed to relate sending an email to the storybook notion of passing a note in class. Write your note on the paper, fold it into an airplane shape, launch it across the classroom, and hope against hope that you avoid the teacher&#8217;s gaze, aren&#8217;t ratted out by a classmate, <em>and</em> that you execute a perfect delivery so it doesn&#8217;t fall into the wrong hands.</p>\n<p>Come to think of it, maybe this isn&#8217;t an icon that inspires confidence of a safe delivery. Nonetheless, I think it&#8217;s a pretty cute metaphor.</p>\n<p>The app I most associate with paper airplane icons is the Mac&#8217;s built in Mail app. Apple uses a mix of metaphors in the app, including a postage stamp for the app&#8217;s main icon:</p>\n<p><img title=\"MailApp.png\" src=\"http://bitsplitting.org/wp-content/uploads/2017/03/MailApp.png\" alt=\"Apple Mail app icon.\" width=\"128\" height=\"128\" border=\"0\" /></p>\n<p>and physical envelopes in the icons for some of its preferences:</p>\n<p><img title=\"ToolbarIcons.png\" src=\"http://bitsplitting.org/wp-content/uploads/2017/03/ToolbarIcons.png\" alt=\"Image of toolbar icons in Mail Preferences featuring physical envelopes\" width=\"540\" height=\"81\" border=\"0\" /></p>\n<p>But when it comes to drafting and sending mail? It&#8217;s all about the planes. Notice how they even leverage the playful symbolism to represent a draft message with a paper folding diagram:</p>\n<p><img title=\"MailIcons.png\" src=\"http://bitsplitting.org/wp-content/uploads/2017/03/MailIcons.png\" alt=\"Image of Mail.app sidebar icons.\" width=\"262\" height=\"180\" border=\"0\" /></p>\n<p>I was curious to know if another email app used paper airplanes to represent drafts before Apple Mail did. I went out Googling and found all manner of representations, usually employing the <em>paper envelope</em>, or another snail-mail related symbol. None of them, except Apple Mail, uses a paper airplane.</p>\n<p>So my modest research suggests that the use of a paper airplane was a pretty novel bit of design. Was it an Apple innovation, or did it debut in some prior app I haven&#8217;t been able to track down? Is Microsoft&#8217;s adoption of the symbol the next step towards making paper airplane icons the universal symbol of sent mail? I kind of hope so!</p>\n",
            "date_published": "2017-03-16T17:43:20+00:00",
            "date_modified": "2017-03-16T21:01:53+00:00",
            "author": {
                "name": "Daniel Jalkut"
            }
        },
        {
            "id": "http://bitsplitting.org/2017/02/10/accessible-resistance/",
            "url": "http://bitsplitting.org/2017/02/10/accessible-resistance/",
            "title": "Accessible Resistance",
            "content_html": "<p><em>Accessibility</em> in software refers to the noble ambition of ensuring that software is usable by as diverse a user base as possible. To that end, software is made more accessible by adapting to a variety of physical or cognitive impairments that may affect any individual user.</p>\n<p>In the United States and other countries, there is an ugly trend towards supporting politicians who don&#8217;t believe that people from diverse backgrounds, or with specific impairments, should be accommodated by society as a whole.</p>\n<p>Many developers are looking for concrete ways to fight these politicians who don&#8217;t value diversity and inclusion. One small thing we can all do to push back, to resist, is to ensure our own apps are as accessible as possible.</p>\n<p>During my many years as an indie Mac developer, I have often prioritized accessibility in my apps. I have heard from many <a href=\"http://red-sweater.com/marsedit/\">MarsEdit</a>  users, particularly those with vision difficulties, who tell me its accessibility makes it a better alternative to many other blogging solutions.</p>\n<p>I am gratified to hear about the ways I have gotten accessibility right, but I am still not satisfied that I have done enough. There are nuances of MarsEdit&#8217;s accessibility that can yet be improved, while some of my other apps, such as <a href=\"https://red-sweater.com/blackink/\">Black Ink</a>, are still hardly accessible at all.</p>\n<p>If you are a Mac or iOS developer who is committed to improving the accessibility of your app, a great place to start is with the WWDC 2016 <a href=\"https://developer.apple.com/videos/play/wwdc2016/202/\">What&#8217;s New In Accessibility</a> session. Apple is always enhancing the variety of accessible features that are built in to iOS, macOS, tvOS, and <em>yes!</em>, even watchOS.</p>\n<p>Spend a half hour watching this video, and start getting up to speed with how you will enhance the accessibility of your app. No matter where you live in the world, you can be a strident voice for inclusion by declaring, through your actions in Xcode, that your software is <em>designed to be used by everyone</em>.</p>\n",
            "date_published": "2017-02-10T17:11:20+00:00",
            "date_modified": "2017-02-10T17:19:53+00:00",
            "author": {
                "name": "Daniel Jalkut"
            }
        },
        {
            "id": "http://bitsplitting.org/2017/01/18/progressive-disclosure-in-swift/",
            "url": "http://bitsplitting.org/2017/01/18/progressive-disclosure-in-swift/",
            "title": "Progressive Disclosure In Swift",
            "content_html": "<p>In his excellent interview with the Accidental Tech Podcast, <a href=\"http://nondot.org/sabre/\">Chris Lattner</a> defended the goal of Swift being suitable to both beginner and advanced programmers. He cites <a href=\"https://en.wikipedia.org/wiki/Progressive_disclosure\">progressive disclosure</a>, a design philosophy that is often employed in GUI applications, to make otherwise intimidating interfaces appear approachable. From <a href=\"https://overcast.fm/+CdTE-_oY/1:07:12\">episode 205 of the show</a>:</p>\n<blockquote>\n<p>The secret to Swift in being easy to learn, easy to use as a teaching vehicle, but also powerful enough to solve the problems that need to be solved, is that the complexity in the language needs to be progressively disclosed.</p>\n</blockquote>\n<p>This resonates particularly with me not only because I strive to make the same kinds of design tradeoffs in my own software, but because this concept is particularly important to the history of the Macintosh. Progressive disclosure as a user accommodation is intrinsic to most Mac and iOS interface design.</p>\n<p>An example that anybody who uses a Mac can relate to is the process of deleting files by way of the Trash. There&#8217;s a file on your Desktop, and you want to get rid of it. A naive user who has never used a Mac before will soon learn how to drag the icon onto the trash, and how to empty it through a variety of discoverable UI buttons and menus. This is the Mac, it&#8217;s <em>easy to use.</em></p>\n<p>After gaining some experience the same user might start to find all that clicking and dragging tedious, so they&#8217;ll be delighted to learn that the cryptic symbols on commonly-used menu items represent keyboard shortcuts. To throw away a file and empty the trash, just select the file, press Cmd-Delete, and then Cmd-Shift-Delete. This is the Mac, it&#8217;s <em>streamlined for productivity.</em></p>\n<p>When the standard menu items and shortcuts don\u2019t cut it anymore, the same user will be inspired by the variety of nuanced variations that are unlocked by holding the Option key while selecting menu items, and that the incorporation of the Option key into existing keyboard shortcuts often maps perfectly to the same menu item that appears when the key\u00a0is\u00a0held down. &#8220;Move to Trash&#8221; becomes &#8220;Delete Immediately,&#8221; and &#8220;Empty Trash\u2026&#8221; becomes &#8220;Empty Trash&#8221;. The omission of the ellipsis, they have come to discover, indicates an action that will take place immediately, without additional interaction. This is the Mac, it&#8217;s <em>kind of complicated, but great for power users.</em></p>\n<p>Finally, finding cause to delete a variety of files from a directory selectively, based on pattern-matching, they discover the Terminal app. They teach themselves the basics of a decades old interactive shell scripting wildcard notation, and are off to the races invoking the &#8220;rm&#8221; tool with wild abandon. This is the Mac, it&#8217;s <em>got god-awful, nasty interfaces for accomplishing just about anything.</em></p>\n<p>I worked at Apple from around 1995 to 2002, so I had the pleasure of witnessing reaction both within and outside the company as we transitioned from Mac OS 9 to Mac OS X. The Terminal, as it happens, was one of the most contentious new features. Mac OS 9 had standalone command-line developer tools such as MPW (Macintosh Programmers Workshop), but it was a sort of point of pride that it didn&#8217;t ship with a Terminal app. This wasn&#8217;t DOS, for crying out loud! Many people complained that Mac OS X was too complicated, and that the inclusion of a Terminal app was the beginning of the end for the system&#8217;s famous usability.</p>\n<p>Fifteen years later, people are still performing incredibly simple, incredibly complex tasks with macOS Sierra. It ships with a Terminal <em>and</em> it ships with a Trash icon. This is the Mac, it <em>spans the spectrum from simplicity to complexity.</em> Apple&#8217;s turns out to be pretty good at this, so they deserve the benefit of the doubt that they&#8217;ll achieve the same type of goal with Swift. It seems like they&#8217;re off to a good start.</p>\n",
            "date_published": "2017-01-18T17:09:40+00:00",
            "date_modified": "2017-01-18T17:16:28+00:00",
            "author": {
                "name": "Daniel Jalkut"
            }
        },
        {
            "id": "http://bitsplitting.org/2017/01/03/bitter-icloud-truth/",
            "url": "http://bitsplitting.org/2017/01/03/bitter-icloud-truth/",
            "title": "Bitter iCloud Truth",
            "content_html": "<p>A few days ago, I set about tidying up my <em>completely unruly</em> Contacts database. Over the years I have accumulated 2,953 distinct contact cards. Thousands are duplicates, hundreds were added automatically by Mail or macOS, some are for people whom I no longer know, and a very few are for folks I no longer want to know.</p>\n<p>The first thing to do was obviously to take care of those duplicates. Contacts on the Mac features a couple seemingly handy menu items for dealing with this problem: &#8220;Look for Duplicates&#8221; and &#8220;Merge Selected Cards.&#8221; <strong>I cannot recommend using either of these features.</strong></p>\n<p>When I invoked &#8220;Look for Duplicates&#8221; on my 3000 cards, of which I could tell by visually scanning that at least 1000 were duplicates, Contacts came back at me with a stunningly unhelpful offer to fix 9 of them:</p>\n<p><img title=\"NiceTry.png\" src=\"http://bitsplitting.org/wp-content/uploads/2017/01/NiceTry.png\" alt=\"NiceTry\" width=\"511\" height=\"150\" border=\"0\" /></p>\n<p>Seeing that I would have to identify the clones myself, I committed to selecting groups of two or three clearly duplicated identities, and selecting Card -&gt; Merge Selected Cards. I generally trust Apple software to do the right thing, but recognizing the heartache that would come with losing any information from these cards, I decided to proactively <em>export my Contacts database</em> so that I would be safe should anything go wrong. Selecting File -&gt; Export\u2026 -&gt; Contacts Archive from the menu bar produced a 60MB bundle that seemed certain to contain all of the contact information on my Mac.</p>\n<p>I tried &#8220;Merge Selected Cards&#8221; on a few items, and it seemed to do the trick. Where data from the two cards was identical, it merged them cleanly. Where something was in conflict, for example if a Company Name had changed from &#8220;Google&#8221; to &#8220;Apple&#8221; at some point, the conflict was resolved by picking one and appending the other to the merged card&#8217;s &#8220;Note&#8221;.</p>\n<p>After painstakingly merging cards in this manner for an hour or so (!), I had stopped paying close attention to whether conflicting data was being persisted well or not. At one point I stumbled upon the realization that I lacked the phone number for a contact whom I had sent an SMS message just within the past week. Other contacts were missing key data, too. An outdated email address here, a missing mailing address there. Whoops! Abort mission! Time to recover from that backup file.</p>\n<p>I double-clicked the backup file in the Finder, and agreed when Contacts asked if I was sure I wanted to &#8220;replace my Contacts data&#8221; with the contents of the archive.</p>\n<p><img title=\"Screenshot_1_3_17__1_14_PM.png\" src=\"http://bitsplitting.org/wp-content/uploads/2017/01/Screenshot_1_3_17__1_14_PM.png\" alt=\"Screenshot 1 3 17 1 14 PM\" width=\"420\" height=\"168\" border=\"0\" /></p>\n<p>You&#8217;re damned right, I am sure! Give me back my data.</p>\n<p>After restoring from Backup, I found that I didn&#8217;t have any duplicate entries in Contacts. In fact, I only had around 130 cards. Somehow I had lost the vast majority of cards in this process. What&#8217;s going on here?</p>\n<p>I think what happened is that exporting from Contacts on my Mac is creating an archive that, when imported, possibly reflects the state of my Contacts database from years ago, before I ever agreed to sync Contacts with iCloud. No amount of futzing with local data on my Mac, including disabling iCloud syncing, and restoring the contents of Contacts&#8217;s data folder (~/Library/Application Support/AddressBook) would coerce Contacts into showing me all of my Contacts. I began to panic. Had I actually lost all of my Contacts data? In spite of dutifully backing up my local data <em>and making a proactive archive from Contacts</em>, the app had a very different idea of what my Contacts &#8220;truth&#8221; was.</p>\n<p>I was relieved to discover an iCloud.com feature for recovering Contacts to the state they were in on a previous date. You get to it by navigating to iCloud Settings -&gt; Advanced, and clicking the &#8220;Restore Contacts&#8221; link.</p>\n<p><img title=\"NewImage.png\" src=\"http://bitsplitting.org/wp-content/uploads/2017/01/NewImage.png\" alt=\"NewImage\" width=\"599\" height=\"307\" border=\"0\" /></p>\n<p>After restoring Contacts through iCloud.com, and syncing to iCloud from my Mac, my Contacts were finally restored to their absurdly broken, but data-intact, state.</p>\n<p>The overarching lesson here is that when it comes to iCloud-synced data, <em>you cannot count on local data</em>, and worse: you can&#8217;t count on local archives. If you care to archive your data, navigate to iCloud.com and use the pertinent export feature from the web site. For example, from iCloud.com&#8217;s Contacts interface, click on a contact, then select &#8220;Select All&#8221;, and then &#8220;Export vCard\u2026&#8221;.</p>\n<p><img title=\"ExportVcard.png\" src=\"http://bitsplitting.org/wp-content/uploads/2017/01/ExportVcard.png\" alt=\"ExportVcard\" width=\"247\" height=\"277\" border=\"0\" /></p>\n<p>Amusingly, downloading this file will probably cause Contacts on your Mac to immediately attempt to import all of the contacts, which of course you will want to decline to do. Apple has a <a href=\"https://support.apple.com/en-us/HT204055\">reference page</a>, with detailed instructions for archiving various kinds of iCloud data.</p>\n<p>The other lesson of course is you can&#8217;t trust Contacts to do a good or even acceptable job merging Contacts. I&#8217;ll be looking for another solution on this front. On Twitter, <a href=\"https://twitter.com/afwaller/status/816330458086723584\">a f waller</a> suggested Smart Merge Pro for iOS, but I tried that and it unfortunately is also blind to the duplicate nature of my cards! I guess something special is making my cards appear non-duplicated to both Contacts and this third-party app.</p>\n<p><strong>Update:</strong> I figured out why &#8220;Look for Duplicates&#8221; behaved so poorly: it wasn&#8217;t even considering my iCloud-based cards. So when I invoke it in Contacts on my Mac, it evaluates only the ~140 cards that are considered local to my Mac, and completely ignores the ~3000 cards that are synced via iCloud. Unfortunately there is no &#8220;Look for Duplicates&#8221; on iCloud.com, so what is a Mac-based user, for whom Smart Merge Pro doesn&#8217;t work, to do?</p>\n<p>I think the way it works is it only considered &#8220;On my Mac&#8221; cards, <em>if there are any local cards</em>. If <em>all</em> your cards are iCloud based, then the &#8220;Look for Duplicates&#8221; command seems to work as expected.</p>\n",
            "date_published": "2017-01-03T13:30:43+00:00",
            "date_modified": "2017-01-03T18:32:29+00:00",
            "author": {
                "name": "Daniel Jalkut"
            }
        },
        {
            "id": "http://bitsplitting.org/2016/10/31/touch-bar-everywhere/",
            "url": "http://bitsplitting.org/2016/10/31/touch-bar-everywhere/",
            "title": "Touch Bar Everywhere",
            "content_html": "<p>Apple announced on Thursday that many of their new MacBook Pros will ship with a &#8220;Touch Bar,&#8221; a narrow, high resolution touch screen in place of the Mac keyboard&#8217;s traditional Function Key row.</p>\n<p>Many people immediately wondered whether we can expect Apple to release an external keyboard with the Touch Bar. This would bring the technology to the much wider audience of Mac users who are not ready to update to the latest MacBooks, or who prefer desktop Macs, or who prefer the flexibility of using their MacBook in a desktop-style configuration.</p>\n<p>The question was discussed on the <a href=\"http://atp.fm/episodes/193\">latest Accidental Tech Podcast</a>, in which, if memory serves, John Siracusa and Marco Arment argued different angles of the &#8220;no&#8221; argument, citing the hardware cost, the extent to which a Touch Bar keyboard would complicate the accessories lineup, and perhaps most significantly, that Tim Cook does not care enough about the Mac to prioritize pushing any such technology.</p>\n<p>Casey Liss watched football. Zing! Actually, Casey pushed back against the cynicism, suggesting that Apple&#8217;s <em>apparent</em> lack of enthusiasm for the Mac does not reflect a lack of commitment to improving it. I, on the other hand, take exception with the very suggestion that Apple lacks enthusiasm or is not investing heavily in the Mac. Or, at least in this feature.</p>\n<p>I think Apple intends to push the Touch Bar as as widely as it possibly can. The current MacBook Pro lineup is the most practical computer to debut the feature, but as it becomes possible to bundle it with external keyboards, and on notebook computers at every price point, they will do so.</p>\n<p>Why am I so assured of Apple&#8217;s big plans for the Touch Bar? Because while many people assert that Apple is not investing seriously in the Mac, the Touch Bar&#8217;s hardware <em>and</em> software support appear to have been a major priority for the company in the year or two leading up to its release.</p>\n<p>A massive amount of design work must have gone into the Touch Bar&#8217;s physical hardware, structuring the information it represents, and deciding how users will most usefully interact with it. I suspect that the Touch Bar merited an amount of design effort perhaps less than, but not completely incomparable to a standalone product like the Watch.</p>\n<p>Thanks to the Touch Bar simulator in Xcode 8.1, we can also already take stock of the sheer amount of engineering effort, <em>across many disparate groups in the company</em>, that went into supporting the Touch Bar from a wide range of different apps and modes in macOS. Leave the simulator running while you  go about your work, and prepare to be repeatedly surprised by the variety of novel use cases that have already been identified and implemented.</p>\n<p>I find it impossible to believe that Apple would go to all this work, both on the Touch Bar itself, and across the entire range of its own apps and OS features, unless it had a grand vision for the Touch Bar that extends way beyond the internal keyboard of its premium notebook computers.</p>\n<p>Instead, I think Apple sees the Touch Bar as a long-term, distinguishing aspect of using a Mac. Users will always be able to get by without one, just as they do for example when a multi-touch trackpad is not available. But macOS, and nearly every app that users run on it will work <em>better</em> with a Touch Bar. One day we&#8217;ll expect to always have access to one, and will feel that something is missing if we don&#8217;t.</p>\n<p>It&#8217;s easy to see why Apple couldn&#8217;t come charging out of the gate with this vision fully realized. The Touch Bar hardware is no doubt expensive, and there are probably practical considerations with respect to the security of Touch ID, bandwidth between the device and the Mac, and managing its power needs in a user-friendly manner.</p>\n<p>I say give Apple time. They&#8217;ve made a huge investment in Touch Bar, and all indications are they are prepared to continue prioritizing support for it down the road. We&#8217;re only on the brink of entering the early adopter phase, but in years to come I do think the Touch Bar will be everywhere.</p>\n",
            "date_published": "2016-10-31T17:04:57+00:00",
            "date_modified": "2016-11-01T00:03:07+00:00",
            "author": {
                "name": "Daniel Jalkut"
            }
        },
        {
            "id": "http://bitsplitting.org/2016/10/30/the-price-of-gpl/",
            "url": "http://bitsplitting.org/2016/10/30/the-price-of-gpl/",
            "title": "The Price Of GPL",
            "content_html": "<p>Matt Mullenweg, the founder of Automattic, downloaded his competitor Wix&#8217;s iOS app. It looked eerily familiar, and he confirmed it contains source code stolen from WordPress</a>. He called them out on his blog, <a href=\"https://ma.tt/2016/10/wix-and-the-gpl/\">getting right to the point</a> in addressing the problem:</p>\n<blockquote><p>\nYour app\u2019s editor is built with stolen code, so your whole app is now in violation of the license.\n</p></blockquote>\n<p>Wix&#8217;s CEO, Avishai Abrahami, responded with a <a href=\"http://www.wix.com/blog/2016/10/dear-matt-mullenweg-an-open-letter-from-wix-coms-ceo-avishai-abrahami/\">round of non-sequiturs</a> that carefully evade the point that his product is built from source code for which they have not paid. One of his engineers <a href=\"https://medium.com/@talkol/how-i-found-myself-accused-of-stealing-code-from-wordpress-a7350da9f9f2#.8ft8sifad\">equally misses the point</a>, focusing on the circumstances surrounding the violation, rather than taking responsibility for the theft.</p>\n<p>Some will take issue with the use of strong words like &#8220;stolen code,&#8221; and &#8220;theft,&#8221; with respect to a GPL violation. But that&#8217;s exactly what it is: software has been taken and deployed in Wix&#8217;s product, but the price for doing so has not been paid.</p>\n<p>Many developers (and CEOs) seem to prefer remaining willfully oblivious to the consequences of using GPL code. They loosely interpret the terms of GPL to suit their own wishes for what they implied:</p>\n<ul>\n<li>&#8220;It&#8217;s OK for us to use GPL code anywhere, as long as we contribute back changes.&#8221;</li>\n<li>&#8220;It&#8217;s only a small amount of GPL code, so the license doesn&#8217;t apply.&#8221;</li>\n<li>&#8220;We contributed to this GPL code, so we have special rights to use it.&#8221;</li>\n<li>&#8220;We give back to the community in other ways, so it balances out.&#8221;</li>\n</ul>\n<p>All false, yet all common interpretations of GPL, and echoes of the poor arguments presented by Wix&#8217;s CEO and engineer.</p>\n<p>The price of GPL is fairly obvious and easy to understand, even if there is some bickering about what constitutes &#8220;linked code.&#8221; You don&#8217;t have to be a legal expert to get the gist of it: <strong>if you want to link your software with GPL code, you must also make your software&#8217;s source code available</strong>. Specifically, you must make your software&#8217;s source code available to customers who install your software, under a GPL-compatible license. You have to give your code away. That&#8217;s the price of GPL.</p>\n<p>Many developers understand, and view the price of GPL as perfectly justified, while others (myself included) find it unacceptable. So what am I supposed to do? Not use any GPL source code at all in any of my proprietary products? Exactly. Because the price of GPL is too much for me, and I don&#8217;t steal source code.</p>\n",
            "date_published": "2016-10-30T11:49:04+00:00",
            "date_modified": "2016-10-31T08:32:57+00:00",
            "author": {
                "name": "Daniel Jalkut"
            }
        },
        {
            "id": "http://bitsplitting.org/2016/10/26/log-littering/",
            "url": "http://bitsplitting.org/2016/10/26/log-littering/",
            "title": "Log Littering",
            "content_html": "<p>Apple has dramatically revamped its standard logging mechanism. <a href=\"https://developer.apple.com/reference/os/1891852-logging\">Unified Logging</a>, available in macOS 10.12 and iOS 10, replaces various file-based logging approaches with a centralized, database-backed repository for log information of all levels of interest.</p>\n<p>The big win, both for developers and for users, is performance. Where the simple act of logging some debugging information used to have enough of a cost to dissuade rampant use, the new system makes it so cheap that developers inside Apple and out are being encouraged to &#8220;log like the dickens&#8221; in the name of generating more evidence for posthumous debugging. The new system also offer impressive data mining abilities, making it far easier to filter <em>for what you&#8217;re looking for</em> and to track logging information across specific activities, even if the activity spans multiple processes.</p>\n<p>The two big losses, in my opinion, are that the sheer size, number, and variety of logging messages makes it impractical for users to skim the console for &#8220;real problems,&#8221; and that the resulting logging archives are so large that it&#8217;s impractical to casually include them with bug reports to Apple or 3rd party developers.</p>\n<p>The <a href=\"https://developer.apple.com/videos/play/wwdc2016/721/\">WWDC session</a> on the topic goes into detail on these points, but perhaps most useful for framing my complaints here are <a href=\"https://developer.apple.com/videos/play/wwdc2016/721/?time=152\">Apple&#8217;s stated goals</a> for the revamp:</p>\n<ul>\n<li>One common, efficient logging mechanism for both user and kernel mode</li>\n<li>Maximize information collected while minimizing observer effect [the phenomenon that enabling or adding logging changes the behavior of the system you are trying to understand]</li>\n<li>We want as much logging on all the time as possible</li>\n<li>Design privacy into the system</li>\n</ul>\n<p>Two of the stated goals, &#8220;maximizing information collection,&#8221; and &#8220;as much logging on all the time as possible,&#8221; exacerbate the problems of there being so much log data that it&#8217;s both difficult to skim, and cumbersome to share.</p>\n<p>Imagine a society in which all packaging has been transformed into fast-composting, biodegradable materials. Your soda bottles, snack wrappers, cigarette packages, etc., all biodegrade to dirt within 48 hours of use. What a boon for the world: the major, global problem of trash accumulating in our towns and environment would be gone. Poof!</p>\n<p>Or would it? When &#8220;littering has no cost,&#8221; I suspect that we&#8217;d face a new problem: far more people would litter. Why bother finding a place to throw out that bottle, when nature will take care of it in within 48 hours? Multiply this attitude out over even a small portion of the world&#8217;s billions of people, and we&#8217;d be guaranteed to be buried in trash. All trash that will be gone in 48 hours, mind you, but constantly replenished with a fresh supply.</p>\n<p>I think this metaphor points to a similar problem with unified logging: the sudden onslaught of &#8220;low cost logging&#8221; has left our developer society unprepared <em>in some specific ways</em> to deal with the consequences of the new reality.</p>\n<p>So, how can we, and Apple fix this? We need specific solutions that make skimming for problems, and sharing pertinent log data easier, yet don&#8217;t impact the very positive goals outlined by Apple above. Here is my advice:</p>\n<ol>\n<li><strong>Don&#8217;t litter the logs.</strong> Just because you can log it, and just because doing so is cheap, doesn&#8217;t mean there isn&#8217;t a cost. Some of the recurring log messages littering my Console arrive at a rate of <em>thousands per minute</em>. There may be good arguments that certain subsystems, in certain states, should log this extensively if the resulting data will justify easier diagnosis of problems, but much of the junk I see are redundant reiterations of relatively useless information:</li>\n</ol>\n<pre>Not switching as we're not in ~/Library/Keychains...\n...\nCSSM Exception:...\n...\nEtc. Etc. Etc.</pre>\n<p>Some of these seem to be well and truly noise, but some of them, even if they seem highly redundant and noisy <em>to me</em>, could in fact represent useful logging if you happened to, for example, be tracking down a subtle bug in Apple&#8217;s security libraries. That&#8217;s fine, I&#8217;ll accept that some amount of log diarrhea in the name of better software, but only if the following accommodation is made\u2026</p>\n<ul>\n<li>\n<p><strong>Annotate high-frequency logs for easier filtering.</strong> The logging system offers a variety of tools for annotating log messages, but even internal Apple groups do not seem to use these extensively or appropriately. The system supports the notion of three levels of log message: default, info, and debug. Only the &#8220;default&#8221; level messages are displayed by default in the Console app, yet all of the above-described garbage is displayed <em>in that default mode</em>. The Console will become significantly more useful when the worst offenders have marked their messages for severity, subsystem, and category so that they can be effectively omitted from the default view, and so that they can be mined later for use by folks who can actually make sense of them.</p>\n</li>\n<li>\n<p><strong>Generate context-specific sysdiagnoses.</strong> One of the worst practical outcomes of unified logging is that capturing a &#8220;sysdiagnose&#8221; on my Mac now generates a compressed archive that is still larger than 400MB. These archives are typically requested <em>by most groups at Apple</em> in response to bug reports, regardless of how severe the bug is or how readily reproducable it appears to be. In the world of Apple bug reports, sysdiagnoses are treated like lightweight bits of information that should be appended to every issue, except they&#8217;re now anything but lightweight.</p>\n<p>All the annotation work advised above should really pay off when Apple provides a streamlined mechanism for capturing sysdiagnose information <em>pertinent to a specific subsystem or product.</em> The company already offers <a href=\"https://developer.apple.com/bug-reporting/profiles-and-logs/\">product-specific advice</a> for capturing log information, sometimes requiring the installation of custom profiles and other shenanigans. The lightweight unified logging system empowers Apple to both require that internal groups properly annotate their log messages <em>and to facilitate smarter gathering of that data.</em></p>\n<p>Currently if you want to capture a sysdiagnose at any time a Mac, you simply press Ctrl-Opt-Cmd-Shift-Period. On an iOS device it&#8217;s done by holding both volume keys and the power key, but you have to enable logging first with a custom profile. This shortcut will generate one of those mondo 400MB style sysdiagnose archives, which you can upload to attach to your bug reports <em>in your copious spare time.</em></p>\n<p>I envision a prompt that appears after invoking the existing shortcut, or else a new shortcut for &#8220;interactive sysdiagnose&#8221; where you could specify the category of bug you are reporting. The prompt would list categories correlating to groups at Apple who had done the work of providing streamlined log filtering data that will effectively strip out all the useless (to that group) noise from your log data.</p>\n<p>In fact, sysdiagnose already takes a &#8220;process&#8221; parameter when invoked from the command line, and my understanding is that this enables it to capture data that is pertinent to the target process. The unified logging system seems to provide the infrastructure for even smarter capturing along these lines.</p>\n<p>I realize that in this time of flux, where much log data <em>is not properly annotated</em>, there is still an incentive for many groups to capture as much as possible and sort it out on Apple&#8217;s end. These groups should know, however, that the larger the sysdiagnose archive you ask users to upload, the lower the chances they will bother actually following through on filing the bug or on providing the pertinent information you have requested.</p>\n</li>\n<li>\n<p><strong>Annotate specifically for user-concerning issues.</strong> Power users on the Mac have, for years, counted on being able to skim the console log for information that might explain a slow Mac, persistent crashes, or other inexplicable behavior. Given the huge increase in number of log message and the lackluster annotation of these messages by Apple, the Console app is effectively useless to users for this purpose.</p>\n<p>On top of getting the annotation right in general, I think a new <em>special level</em> of log message should be created, indicating particular concern to end-users. These would identify log messages that developers specifically think users should take notice of and follow up about. I mentioned there are three basic levels of log message: default, info, and debug. On top of that, there are two special levels called &#8220;fault&#8221; and &#8220;error&#8221;, which can be filtered on in the Console, and which receive special treatment from the logging system.</p>\n<p>These special levels seem close to what users might find interest in, but they&#8217;re not quite right either.</p>\n<p>A &#8220;user interest&#8221; level of logging message would facilitate the kind of high level skimming that seems impossible in Sierra today. These log messages would convey information that a user might gain some insight from. They would stand in stark contrast to the noise of messages like these, from the filecoordinationd process:</p>\n<pre>Claim D32EDEBE-C702-4638-800C-E4BAB9B767F3 granted in server</pre>\n<p>Nobody knows what a claim is, or cares whether it was &#8220;granted in server&#8221; &#8230; unless they are actively debugging filecoordinationd. On the other hand, a message indicating the failure to grant a claim &#8220;because the disk is full,&#8221; could be very useful to users indeed.</p>\n<p>I realize the line could be difficult to draw in some circumstances, but a huge number of messages <em>currently being logged</em> are obviously not of user interest. Perhaps then, the opposite approach could be taken, and log messages could be annotated as being specifically useful for posthumous, internal debugging by developers.</p>\n</li>\n</ul>\n<p>I tell you, things are bleak. We&#8217;re swimming in a morass of useless console noise, and there is little we can do about it. There is room for optimism however, as the <em>logging infrastructure is good</em>, and seems to support many thoughtful measures that could attenuate the problems and make the system more useful and less cumbersome to developers, end-users, and well-meaning bug reporters.</p>\n<p>The console is littered with trash. Sure, it will biodegrade in 48 hours, but that doesn&#8217;t mean we shouldn&#8217;t be concerned with cleaning it up. A combination of more thoughtful logging, proper annotation, and appropriate filtering will get us out of this mess.</p>\n",
            "date_published": "2016-10-26T10:11:48+00:00",
            "date_modified": "2016-10-26T22:34:39+00:00",
            "author": {
                "name": "Daniel Jalkut"
            }
        }
    ]
}