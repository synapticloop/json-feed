// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//
//        Thoughtfully generated by synapticloop project initialiser
//
//          https://github.com/synapticloopltd/project-initialiser
//
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


// list all of the plugins for this project
plugins {
	id 'java'
	id 'eclipse'
	id 'com.github.ben-manes.versions' version '0.14.0'
	id 'synapticloop.copyrightr' version '1.1.2'
	id 'synapticloop.documentr' version '2.9.0'
	id 'co.riiid.gradle' version '0.4.2'
	id 'com.jfrog.bintray' version '1.7.1'
	id 'net.saliman.cobertura' version '2.4.0'
}

// textual information for this project
group = 'synapticloop'
archivesBaseName = 'json-feed'
description = """JSON Feed Parser and creator in Java"""

version = '1.0.0'


sourceCompatibility = 1.8
targetCompatibility = 1.8

// all of the repositories in use for this project
repositories {
	mavenLocal()
	mavenCentral()
	jcenter()

}
// list all of the dependencies for this project
dependencies {
	runtime 'org.json:json:20160810'
	runtime 'org.slf4j:slf4j-api:1.7.24'

	compile 'org.json:json:20160810'
	compile 'org.slf4j:slf4j-api:1.7.24'
	compile 'org.apache.logging.log4j:log4j-slf4j-impl:2.8.2'
	compile 'org.apache.logging.log4j:log4j-core:2.8.2'


	testRuntime 'junit:junit:4.12'
	testRuntime 'org.mockito:mockito-all:1.10.19'

	testCompile 'junit:junit:4.12'
	testCompile 'org.mockito:mockito-all:1.10.19'

}

// we always want to fail on version conflicts
configurations.all {
	resolutionStrategy {
		failOnVersionConflict()
		// you will want to force specific versions of dependencies as per the
		// following:

		force 'junit:junit:4.11'

	}
}

// settings for the documentr plugin
documentr {
	directory = '.'
	verbose = 'false'
	extension = 'md'
}


copyrightr {
	// If set to true (default), this will only log what would have been 
	// changed, if set to false, this will over-write the files __without__
	// warning
	dryRun = false

	// This will be part of the regular expression that is searched for.
	// This helps to narrow down the lines that will be updated, useful
	// where there may be other companies that have copyright information
	copyrightHolder = "Synapticloop"

	// Which files are to be included, by default the included files are
	// - src/**/*.java, and
	// - src/**/*.groovy
	includes = [ 
		"src/**/*.java",
		"src/**/*.groovy",
	]

	// which files are to be excluded, by default there are no exclusions
	excludes = [ "**/*.class" ]

	// whether to only replace the first found instance, by default this
	// is set to true
	onlyReplaceFirst = true

	// the year separator to use
	yearSeparator = " - "

}


def javaApiUrl = 'http://docs.oracle.com/javase/8/docs/api/'
def groovyApiUrl = 'http://groovy.codehaus.org/gapi/'

tasks.withType(Javadoc) {
	options.links(javaApiUrl, groovyApiUrl)
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from 'build/docs/javadoc'
}

task sourcesJar(type: Jar) {
	from sourceSets.main.allSource
	classifier = 'sources'
}


github {
	owner = group
	repo = archivesBaseName
	if(System.getenv('GITHUB_TOKEN')) {
		token = System.getenv('GITHUB_TOKEN')
	}
	tagName = version
	name = version
	assets = [
		'build/libs/' + archivesBaseName + '-' + version + '.jar'
	]
}


bintray {
	user = System.getenv('BINTRAY_USER')
	key = System.getenv('BINTRAY_PASSWORD')

	publications = [ 'synapticloop' ]

	publish = true

	pkg {
		repo = 'maven'
		name = 'json-feed'
	}

}

test.finalizedBy(project.tasks.cobertura)
